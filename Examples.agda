module Examples where

open import PRF
open import Data.Fin  using (Fin; zero; suc)
open import Data.Nat  using (‚Ñï; zero; suc; _+_; _*_; _^_)
open import Data.Nat.Properties using (+-*-suc; +-comm; *-comm)
open import Data.Bool using (Bool; true; false; _‚àß_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong; sym)

ùüé : Fin 1
ùüé = zero

ùüè : Fin 3
ùüè = suc zero

add : PRF 2
add = rec (proj ùüé) (comp suc (nil , proj ùüè))

add-correct : ‚àÄ m n ‚Üí m + n ‚â° ‚ü¶ add ‚üß ((nil , n) , m)
add-correct zero    n = refl
add-correct (suc m) n = cong suc (add-correct m n)

mult : PRF 2
mult = rec (comp zero nil) (comp add (nil , proj (suc zero) , proj (suc (suc zero))))

mult-correct : ‚àÄ m n ‚Üí m * n ‚â° ‚ü¶ mult ‚üß ((nil , n) , m)
mult-correct zero    n = refl
mult-correct (suc m) n rewrite add-correct n (m * n) | mult-correct m n = refl

exp : PRF 2
exp = rec (comp suc (nil , comp zero nil)) (comp mult (nil , proj (suc zero) , proj (suc (suc zero))))

exp-correct : ‚àÄ m n ‚Üí n ^ m ‚â° ‚ü¶ exp ‚üß ((nil , n) , m)
exp-correct zero    n = refl
exp-correct (suc m) n rewrite mult-correct n (n ^ m) | exp-correct m n = refl

two : PRF 2
two = comp suc (nil , comp suc (nil , comp zero nil))

three : PRF 2
three = comp suc (nil , two)

encode : PRF 2
encode = comp mult (nil , comp exp (nil , three , proj (suc zero)) , comp exp (nil , two , proj zero))

encode-correct : ‚àÄ m n ‚Üí (2 ^ m) * (3 ^ n) ‚â° ‚ü¶ encode ‚üß ((nil , n) , m)
encode-correct m n rewrite mult-correct (2 ^ m) (3 ^ n)
                         | exp-correct n 3
                         | exp-correct m 2 = refl

ite : PRF 3
ite = rec (proj zero) (proj (suc (suc zero)))

conj : PRF 2
conj = rec (comp zero nil) (proj (suc (suc zero)))

to-bool : ‚Ñï ‚Üí Bool
to-bool zero    = false
to-bool (suc n) = true

conj-correct : ‚àÄ m n ‚Üí to-bool (‚ü¶ conj ‚üß ((nil , m) , n)) ‚â° (to-bool m) ‚àß (to-bool n)
conj-correct zero zero = refl
conj-correct (suc m) zero = refl
conj-correct zero (suc n) = refl
conj-correct (suc m) (suc n) = refl

-- Lecture 2, Quiz 4, Option 1.
L2Q4-1 : ‚ü¶ comp zero nil ‚üß ((nil , 5) , 7) ‚â° 0
L2Q4-1 = refl

-- Lecture 2, Quiz 4, Option 2.
L2Q4-2 : ‚ü¶ comp suc (nil , proj zero) ‚üß (nil , 5 , 7) ‚â° 8
L2Q4-2 = refl

-- Lecture 2, Quiz 4, Option 3.
L2Q4-3 : ‚ü¶ rec zero (proj (suc zero)) ‚üß (nil , 2) ‚â° 0
L2Q4-3 = refl
